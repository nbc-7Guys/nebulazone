networks:
  nebulazone-network:
    driver: bridge

services:
  app:
    image: shlee054/nebulazone-app:latest
    container_name: nebulazone-app
    ports:
      - "8080:8080"
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - app-logs:/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nebulazone-network

  db:
    image: mysql:8.0
    container_name: nebulazone-db-mysql
    ports:
      - "3306:3306"
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      TZ: Asia/Seoul
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nebulazone-network

  redis:
    image: redis:7-alpine
    container_name: nebulazone-redis
    ports:
      - "6379:6379"
    environment:
      TZ: Asia/Seoul
    volumes:
      - redis-data:/data
      - /etc/localtime:/etc/localtime:ro
    command: redis-server --appendonly yes
    networks:
      - nebulazone-network

  prometheus:
    image: prom/prometheus:latest
    container_name: nebulazone-prometheus
    ports:
      - "9090:9090"
    restart: always
    volumes:
      - ../prometheus/prometheus-prod.yml:/etc/prometheus/prometheus.yml
    networks:
      - nebulazone-network

  grafana:
    image: grafana/grafana:latest
    container_name: nebulazone-grafana
    ports:
      - "3000:3000"
    networks:
      - nebulazone-network

  elasticsearch:
    image: shlee054/elasticsearch-nori:8.18.1
    container_name: nebulazone-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - nebulazone-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.18.1
    container_name: nebulazone-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - nebulazone-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.18.1
    container_name: nebulazone-logstash
    ports:
      - "9600:9600"
      - "5044:5044"
    volumes:
      - ./logstash/config/pipelines-prod.yml:/usr/share/logstash/config/pipelines.yml
      - ./logstash/pipeline/pipeline-prod.conf:/usr/share/logstash/pipeline/pipeline.conf
    environment:
      - XPACK_MONITORING_ENABLED=false
    networks:
      - nebulazone-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.18.1
    container_name: nebulazone-filebeat
    user: root
    volumes:
      - ./filebeat/filebeat-prod.yml:/usr/share/filebeat/filebeat.yml
      - app-logs:/var/log/app
    depends_on:
      - logstash
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    command: [ "--strict.perms=false" ]
    networks:
      - nebulazone-network

volumes:
  es-data:
  redis-data:
  mysql-data:
  app-logs:
