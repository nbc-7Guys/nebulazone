name: CD - Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t shlee054/nebulazone-app:latest .
          docker push shlee054/nebulazone-app:latest

      - name: Create .env file
        run: |
          mkdir -p docker
          echo "SPRING_DATASOURCE_URL=${{ secrets.DB_URL }}" >> docker/.env
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }}" >> docker/.env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}" >> docker/.env
          echo "SPRING_DATA_REDIS_HOST=${{ secrets.REDIS_HOST }}" >> docker/.env
          echo "SPRING_DATA_REDIS_PORT=${{ secrets.REDIS_PORT }}" >> docker/.env
          echo "SPRING_CLOUD_AWS_CREDENTIALS_ACCESS-KEY=${{ secrets.AWS_ACCESS_KEY }}" >> docker/.env
          echo "SPRING_CLOUD_AWS_CREDENTIALS_SECRET-KEY=${{ secrets.AWS_SECRET_KEY }}" >> docker/.env
          echo "SPRING_CLOUD_AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> docker/.env
          echo "SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_CLIENT-ID=${{ secrets.KAKAO_API_KEY }}" >> docker/.env
          echo "SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAVER_CLIENT-ID=${{ secrets.NAVER_API_KEY }}" >> docker/.env
          echo "SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAVER_CLIENT-SECRET=${{ secrets.NAVER_SECRET_API_KEY }}" >> docker/.env
          echo "SPRING_JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> docker/.env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> docker/.env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> docker/.env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> docker/.env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> docker/.env
          chmod 644 docker/.env

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          source: "docker/docker-compose.yml,docker/.env,prometheus/prometheus-prod.yml"
          target: "~/app"
          overwrite: true

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e

             if ! command -v docker &> /dev/null; then
               echo "Installing Docker..."
               sudo apt-get update -y
               sudo apt-get install -y ca-certificates curl
               curl -fsSL https://get.docker.com -o get-docker.sh
               sudo sh get-docker.sh
               sudo usermod -aG docker ubuntu
               echo "Docker installation completed. Please re-run the deployment."
               exit 0
             fi

             cd ~/app
             docker compose pull
             docker compose down --remove-orphans || true
             docker compose up -d

             echo "Check Container"
             docker compose ps

             echo "Deployment completed successfully"
